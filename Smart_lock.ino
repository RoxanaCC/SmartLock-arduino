#include <Keypad.h>#include <LiquidCrystal.h>#include <Time.h>LiquidCrystal lcd(7, 6, 5, 4, 3, 2);const byte ROWS = 4; const byte COLS = 4; char hexaKeys[ROWS][COLS] = {  {'1', '2', '3', 'A'},  {'4', '5', '6', 'B'},  {'7', '8', '9', 'C'},  {'*', '0', '#', 'D'}};byte rowPins[ROWS] = {9, 8, 7, 6}; byte colPins[COLS] = {5, 4, 3, 2}; Keypad customKeypad = Keypad(makeKeymap(hexaKeys), rowPins, colPins, ROWS, COLS); int stare = 0; //In ce stare se afla incuietoarea              //0 - asteapta inceperea              //1 - generaza si trimite nr random              //2 - asteapta si verifica input-ulint rasp = 0; //In ce stare se afla rezultatul              //0 - nedefinit              //1 - corect              //2 - gresitbyte sequence[6];byte seqLen = 6;byte inputCount = 0; // pozitia din secventabyte warning = 0; // numar de warning-uribyte expect = 0; // input asteptatchar customKey;byte errorPin = 1;byte openPin = 2;byte buzzPin = 13;time_t t;void setup() {  Serial1.begin(9600);  pinMode(errorPin, OUTPUT);  pinMode(openPin, OUTPUT);    lcd.begin(16, 2);}void Open(){  for(int x = 0; x < 3; x++){    digitalWrite(openPin, HIGH);   	delay(300);  	digitalWrite(openPin, LOW);  	delay(100);  }}void Warning(){  for(int x = 0; x < 3; x++){    digitalWrite(errorPin, HIGH);   	delay(300);  	digitalWrite(errorPin, LOW);  	delay(100);  }}void Alarm(){  for(int x = 0; x < 7; x++){    for(int hz = 440; hz < 1000; hz++){      tone(buzzPin, hz, 50);      delay(5);    }    for(int hz = 1000; hz > 440; hz--){      tone(buzzPin, hz, 50);      delay(5);    }   }}void printLCD(int nr, int poz){    byte print1 = nr*4;  byte print2 = nr*4+1;  byte print3 = nr*4+2;  byte print4 = nr*4+3;    if(poz == 1){    lcd.setCursor(0, 0);    lcd.write(byte(print1));    lcd.write(byte(print2));    lcd.setCursor(0, 1);    lcd.write(byte(print3));    lcd.write(byte(print4));  }  else if(poz == 2){    lcd.setCursor(2, 0);    lcd.write(byte(print1));    lcd.write(byte(print2));    lcd.setCursor(2, 1);    lcd.write(byte(print3));    lcd.write(byte(print4));  }  else if(poz == 3){    lcd.setCursor(5, 0);    lcd.write(byte(print1));    lcd.write(byte(print2));    lcd.setCursor(5, 1);    lcd.write(byte(print3));    lcd.write(byte(print4));  }  else if(poz == 4){    lcd.setCursor(7, 0);    lcd.write(byte(print1));    lcd.write(byte(print2));    lcd.setCursor(7, 1);    lcd.write(byte(print3));    lcd.write(byte(print4));  }  else if(poz == 5){    lcd.setCursor(9, 0);    lcd.print(nr);  }  else if(poz == 6){    lcd.setCursor(10, 0);    lcd.print(nr);  }  lcd.setCursor(4, 0);  lcd.print();  lcd.setCursor(4, 1);  lcd.print();    lcd.setCursor(11, 0);  lcd.print('"');}void loop() {    if (stare == 0){    customKey = customKeypad.getKey(); // Citirea caracterului de la keypad    if(customKey == '*'){      stare = 1;     }  }  else if (stare == 1){    randomSeed(analogRead(A0)); // Generarea parolei    for(int i = 0; i < 6; i++){      sequence[i] = random(10);    }    Serial1.write(sequence[], seqLen); // Trimiterea parolei prin bluetooth    inputKey = 0;    warning = 0;    rasp = 0    stare =2;  }  else if (stare == 2){    customKey = customKeypad.getKey();    expect = sequence[inputCount];    if(customKey != NO_KEY){ // Un buton este apasat      if(customKey == expect){        rasp = 1;      }      else{        rasp = 2;      }    }    else if(rasp != 0 && customKey == NO_KEY){ // Sa dat drumul la buton      if(rasp == 1){        inputCount++;        if(inputCount == seqLen){          Open();        }      }      else if(rasp == 2){        inputCount = 0;        warning++;        if(warning == 3){          Alarm();        }        else{          Warning();        }      }      rasp = 0;    }  }  time_t t = now();  printLCD((hour(t)/10), 1);  printLCD((hour(t)%10), 2);  printLCD((minute(t)/10), 3);  printLCD((minute(t)%10), 4);  printLCD((second(t)/10), 5);  printLCD((second(t)%10), 6);  }